/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of th
    e created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const app = express();
  const fs = require('fs');
  app.use(express.json()); // Since Express 4.16+, bodyParser is included in Express
  
  class ToDo {
    constructor(id, title, completed, description) {
      this.id = id;
      this.title = title;
      this.completed = completed;
      this.description = description;
    }
  }
  
  function writeJson(){
    let data = "";
    toDoList.forEach((i)=>{
      data= data + JSON.stringify(i)+ "\n";
    })
    fs.writeFileSync("todos.json", data);
  }

  function readJson(){
    let jsonList = [];
    if (!fs.existsSync("todos.json")) {
      return jsonList;
    }
    
    let data = fs.readFileSync("todos.json","utf-8");
    if(data){
      let stringList = data.trim().split("\n");
      jsonList = stringList.map((item)=>{
        return JSON.parse(item);
      })
    }
    return jsonList;
  }

  let toDoList = readJson();
  
  app.get("/todos", (req, res) => {
    res.status(200).json(toDoList);
  });
  
  app.get("/todos/:id", (req, res) => {
    const { id } = req.params;
    const todoItem = toDoList.find(item => item.id === id);
  
    if (todoItem) {
      res.status(200).json(todoItem);
    } else {
      res.status(404).send("Not found");
    }
  });
  
  app.post("/todos", (req, res) => {
    const { title, description, completed } = req.body;
    
    if (!title || !description) {
      return res.status(400).send("Bad Request: Title and description are required.");
    }
  
    const id = (toDoList.length + 1).toString(); // Simple ID generation, consider using UUID for production
    const newTodo = new ToDo(id, title, completed || false, description);
    toDoList.push(newTodo);
    writeJson();
    res.status(201).json({ id });
  });
  
  app.put("/todos/:id", (req, res) => {
    const { id } = req.params;
    const { title, completed } = req.body;
    const todoItem = toDoList.find(item => item.id === id);
  
    if (todoItem) {
      if (title !== undefined) todoItem.title = title;
      if (completed !== undefined) todoItem.completed = completed;
      writeJson();
      res.status(200).json(todoItem);
    } else {
      res.status(404).send("Not Found");
    }
  });
  
  app.delete("/todos/:id", (req, res) => {
    const { id } = req.params;
    const index = toDoList.findIndex(item => item.id === id);
  
    if (index !== -1) {
      toDoList.splice(index, 1);
      writeJson();
      res.status(200).send("OK");
    } else {
      res.status(404).send("Not found");
    }
  });
  
  app.use((req, res) => {
    res.status(404).send("Not Found");
  });

  module.exports = app;
  